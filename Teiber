job "web-app-with-lb" {
  datacenters = ["dc1"]

  # Definition der Load-Balancer-Gruppe
  group "load-balancer" {
    count = 1  # Nur ein Load Balancer ist notwendig

    network {
      mode = "host"
      port "lb" {
        static = 80  # Feste Port-Zuordnung für den Load Balancer
      }
    }

    task "haproxy" {
      driver = "docker"

      config {
        image = "haproxy:latest"
        ports = ["lb"]
        volumes = [
          "local/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg"  # Konfigurationsdatei
        ]
      }

      # Eine Beispielkonfiguration von HAProxy, um Verkehr an die Webseiten-Tasks weiterzuleiten
      template {
        data = <<EOT
global
    log stdout format raw
    maxconn 4096

defaults
    log     global
    mode    http
    option  httplog
    timeout connect 5000ms
    timeout client  50000ms
    timeout server  50000ms

frontend http-in
    bind *:80
    default_backend web_servers

backend web_servers
    balance roundrobin
    server web1 192.168.240.101:8080 check
    server web2 192.168.240.102:8080 check
EOT
        destination = "local/haproxy.cfg"
      }
    }

    # Für Floating IP oder VIP kann Keepalived hinzugefügt werden
    task "keepalived" {
      driver = "docker"

      config {
        image = "osixia/keepalived:2.0.20"
        volumes = [
          "local/keepalived.conf:/etc/keepalived/keepalived.conf"
        ]
      }

      template {
        data = <<EOT
vrrp_instance VI_1 {
    state MASTER
    interface eth0
    virtual_router_id 51
    priority 100
    advert_int 1

    authentication {
        auth_type PASS
        auth_pass 12345
    }

    virtual_ipaddress {
        192.168.240.10/24
    }
}
EOT
        destination = "local/keepalived.conf"
      }
    }
  }

  # Definition der Webseite-Tasks
  group "web" {
    count = 2  # Hochverfügbare Webseiten-Instanzen

    network {
      mode = "bridge"
      port "http" {
        static = 8080  # Statischer Port für die Webseite
      }
    }

    task "nginx" {
      driver = "docker"

      config {
        image = "nginx:latest"
        ports = ["http"]
      }

      # Eine einfache Index.html-Seite bereitstellen
      template {
        data = <<EOT
<html>
  <head><title>Nomad Webseite</title></head>
  <body><h1>Hallo von Nomad!</h1></body>
</html>
EOT
        destination = "/usr/share/nginx/html/index.html"
      }
    }
  }
}
