#!/bin/bash

# Festplatten-Konfiguration
DRIVE_UUID="202CF5B12CF581D8"
MOUNT_POINT="/mnt/plexdrive"

# Farben f√ºr die Konsolenausgabe
GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[33m"
BLUE="\e[34m"
NC="\e[0m"

# Funktionen f√ºr Statusmeldungen
print_success() {
    echo -e "${GREEN}[OK]${NC} $1"
}

print_error() {
    echo -e "${RED}[FEHLER]${NC} $1"
}

print_info() {
    echo -e "${YELLOW}[INFO]${NC} $1"
}

# Funktion: Individuelle Info-Nachricht anzeigen
print_custom_info() {
    echo -e "${YELLOW}[INFO]${NC} $1"
}

# Funktion: ASCII-Banner anzeigen
show_banner() {
    clear
    echo -e "${BLUE}"
    echo "========================================="
    echo "         üõ†Ô∏è Server Setup Skript         "
    echo "========================================="
    echo -e "${NC}"
}

# Funktion: WireGuard einrichten
setup_wireguard() {
    print_info "Richte WireGuard ein..."
    apt update && apt install -y wireguard resolvconf ufw

    mkdir -p /etc/wireguard
    chmod 700 /etc/wireguard

    cat <<EOF > /etc/wireguard/wg0.conf
[Interface]
PrivateKey = +Aim+1d7PcR89p2E=
Address = 10./24
DNS = 1.1.1.1

[Peer]
PublicKey = JK=
PresharedKey = 5XH/Q5MZs=
AllowedIPs = 0.0.0.0/0, ::/0
Endpoint = 8:51820
EOF

    chmod 600 /etc/wireguard/wg0.conf
    wg-quick up wg0
    systemctl enable wg-quick@wg0
    print_success "WireGuard wurde erfolgreich konfiguriert."
}

# Funktion: Plex Media Server einrichten
setup_plex() {
    print_info "Installiere Plex Media Server in einem Docker-Container..."
    mkdir -p /docker/plex

    docker run -d \
        --name=plex \
        --net=host \
        -e TZ="Europe/Berlin" \
        -e PLEX_CLAIM= \
        -v /docker/plex:/config \
        -v $MOUNT_POINT:/data/movies \
        --restart unless-stopped \
        plexinc/pms-docker

    print_success "Plex Media Server l√§uft auf http://<Ihre-IP>:32400 (Port 32400)."
}

# Funktion: UniFi Controller einrichten
setup_unifi() {
    print_info "Installiere UniFi Controller in einem Docker-Container..."
    mkdir -p /docker/unifi

    docker run -d \
        --name=unifi \
        -p 3478:3478/udp \
        -p 10001:10001/udp \
        -p 8080:8080 \
        -p 8443:8443 \
        -p 1900:1900/udp \
        -e TZ="Europe/Berlin" \
        -v /docker/unifi:/config \
        --restart unless-stopped \
        jacobalberty/unifi:latest

    print_success "UniFi Controller l√§uft auf https://<Ihre-IP>:8443 (Port 8443)."
}

# Funktion: Home Assistant einrichten
setup_homeassistant() {
    print_info "Installiere Home Assistant in einem Docker-Container..."
    mkdir -p /docker/homeassistant

    docker run -d \
        --name=homeassistant \
        -p 8123:8123 \
        -e TZ="Europe/Berlin" \
        -v /docker/homeassistant:/config \
        --restart unless-stopped \
        ghcr.io/home-assistant/home-assistant:stable

    print_success "Home Assistant l√§uft auf http://<Ihre-IP>:8123 (Port 8123)."
}

# Funktion: Netdata einrichten
setup_netdata() {
    print_info "Installiere Netdata in einem Docker-Container..."
    mkdir -p /docker/netdata/config /docker/netdata/lib /docker/netdata/cache

    docker run -d \
        --name=netdata \
        -p 19999:19999 \
        -v /docker/netdata/config:/etc/netdata \
        -v /docker/netdata/lib:/var/lib/netdata \
        -v /docker/netdata/cache:/var/cache/netdata \
        --restart unless-stopped \
        netdata/netdata

    print_success "Netdata l√§uft auf http://<Ihre-IP>:19999 (Port 19999)."
}

# Funktion: Portainer einrichten
setup_portainer() {
    print_info "Installiere Portainer in einem Docker-Container..."
    mkdir -p /docker/portainer

    docker run -d \
        --name=portainer \
        -p 9000:9000 \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v /docker/portainer:/data \
        --restart unless-stopped \
        portainer/portainer-ce

    print_success "Portainer l√§uft auf http://<Ihre-IP>:9000 (Port 9000)."
}

# Funktion: Nextcloud einrichten
setup_nextcloud() {
    print_info "Installiere Nextcloud in einem Docker-Container..."
    mkdir -p /docker/nextcloud

    docker run -d \
        --name=nextcloud \
        -p 8080:80 \
        -v /docker/nextcloud:/var/www/html \
        --restart unless-stopped \
        nextcloud

    print_success "Nextcloud l√§uft auf http://<Ihre-IP>:8080."
}

# Funktion: MeshCentral einrichten
setup_meshcentral() {
    print_info "Installiere MeshCentral in einem Docker-Container..."
    mkdir -p ~/meshcentral
    cd ~/meshcentral

    # Docker Compose Datei erstellen
    cat <<EOF > docker-compose.yml
version: '3.7'

services:
  meshcentral:
    image: typhonragewind/meshcentral:latest
    container_name: meshcentral
    network_mode: "host"
    environment:
      - NODE_ENV=production
    volumes:
      - meshcentral_data:/opt/meshcentral/meshcentral-data
      - ./config.json:/opt/meshcentral/meshcentral-data/config.json

volumes:
  meshcentral_data:
EOF

    # Konfigurationsdatei erstellen
    cat <<EOF > config.json
{
  "settings": {
    "cert": "192.168.188.25",
    "port": 443,
    "redirPort": 80
  },
  "domains": {
    "": {
      "allowedOrigin": true
    }
  }
}
EOF

    # Docker-Container starten
    docker-compose up -d

    print_success "MeshCentral l√§uft auf http://192.168.188.25."
}

#Pi-Hole
setup_Pi(){
echo "Installiere Pi-hole in einem Docker-Container..."
# Verzeichnis f√ºr Pi-hole erstellen
mkdir -p /opt/stacks/pihole
# Docker-Compose Datei erstellen
cat <<EOF > /opt/stacks/pihole/docker-compose.yml
version: "3"
services:
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      - "5355:53/tcp"   # √Ñndert den externen DNS-Port auf 5355
      - "5355:53/udp"   # √Ñndert den externen DNS-Port auf 5355
      - "8020:80/tcp"   # Web-Oberfl√§che auf Port 8020 verf√ºgbar machen
    environment:
      TZ: 'Europe/Berlin'  # Zeitzone anpassen
      WEBPASSWORD: 'IhrSicheresPasswort'  # Passwort f√ºr die Weboberfl√§che festlegen
      FTLCONF_LOCAL_IPV4: '192.168.x.x'  # Ersetzen Sie dies durch die IP-Adresse Ihres Hosts
    volumes:
      - './etc-pihole:/etc/pihole'
      - './etc-dnsmasq.d:/etc/dnsmasq.d'
    cap_add:
      - NET_ADMIN
    restart: unless-stopped
EOF

# √úberpr√ºfen, ob Docker und Docker-Compose installiert sind
if ! command -v docker &> /dev/null || ! command -v docker-compose &> /dev/null; then
    echo "Docker oder Docker-Compose sind nicht installiert. Bitte installieren Sie diese zuerst."
    exit 1
fi

# Volumes leeren (optional)
echo "Leere alte Volumes..."
sudo rm -rf /opt/stacks/pihole/etc-pihole/*
sudo rm -rf /opt/stacks/pihole/etc-dnsmasq.d/*

# Docker-Container f√ºr Pi-hole starten
docker-compose -f /opt/stacks/pihole/docker-compose.yml up -d

# √úberpr√ºfen, ob der Container l√§uft
if [ "$(docker ps -q -f name=pihole)" ]; then
    echo "Pi-hole l√§uft auf http://<Ihre-IP>:8020/admin (Port 8020)."
else
    echo "Fehler beim Starten von Pi-hole. √úberpr√ºfen Sie die Logs mit 'docker logs pihole'."
fi
}

# Funktion: Festplatte einrichten
setup_drive() {
    print_info "Richte die externe Festplatte ein..."
    mkdir -p $MOUNT_POINT

    if ! grep -q "$DRIVE_UUID" /etc/fstab; then
        echo "UUID=$DRIVE_UUID $MOUNT_POINT ntfs defaults,auto,nofail,uid=1000,gid=1000,umask=0022 0 0" | tee -a /etc/fstab
    fi

    mount -a

    if mountpoint -q $MOUNT_POINT; then
        print_success "Festplatte erfolgreich unter $MOUNT_POINT eingebunden."
    else
        print_error "Fehler beim Einbinden der Festplatte!"
        exit 1
    fi
}

# Funktion: Ruhezustand deaktivieren
disable_sleep() {
    print_info "Deaktiviere Ruhezustand und Energiesparmodus..."
    systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target
    print_success "Ruhezustand wurde deaktiviert."
}

# Hauptmen√º
main_menu() {
    show_banner
    echo -e "${BLUE}W√§hlen Sie eine Option aus:${NC}"
    echo -e "${BLUE}=========================================${NC}"
    echo " 1) WireGuard einrichten"
    echo " 2) Plex Media Server installieren (Docker)"
    echo " 3) UniFi Controller installieren (Docker)"
    echo " 4) Home Assistant installieren (Docker)"
    echo " 5) Netdata installieren (Docker)"
    echo " 6) Portainer installieren (Docker)"
    echo " 7) Nextcloud installieren (Docker)"
    echo " 8) MeshCentral installieren (Docker)"
    echo " 9) Pi-hole installieren (Docker)"
    echo " 10) Externe Festplatte einbinden"
    echo " 11) Ruhezustand deaktivieren"
    echo " 12) Alle Dienste einrichten"
    echo " 13) Beenden"
    echo -e "${BLUE}=========================================${NC}"
   
    echo -e "Bitte geben Sie eine Zahl ein."
    echo -e "Mit dem Zusatz i gibt es eine Info zu dem Punkt"
    read choice

    # √úberpr√ºfen, ob 'i' f√ºr Info eingegeben wurde
    if [[ "$choice" =~ ^[0-9]+i$ ]]; then
        service_number="${choice%?}"  # Entferne das 'i' und erhalte nur die Zahl
        case $service_number in
            1)  print_custom_info "Noch in Arbeit."
                ;;
            2)  print_custom_info "Noch in Arbeit."
                ;;
            3)  print_custom_info "Noch in Arbeit."
                ;;
            4)  print_custom_info "Noch in Arbeit."
                ;;
            5)  print_custom_info "Noch in Arbeit."
                ;;

	    6)  print_custom_info "Noch in Arbeit."
                ;;
            7)  print_custom_info "Noch in Arbeit."
                ;;
            8)  print_custom_info "Noch in Arbeit."
                ;;
            9)  print_custom_info "Noch in Arbeit."
                ;;
            10) print_custom_info "Noch in Arbeit."
                ;;
            11) print_custom_info "Noch in Arbeit."
                ;;
            12) print_custom_info "Noch in Arbeit."
                ;;
	    13) print_custom_info "Noch in Arbeit."
                ;;
            *)  print_custom_info "Noch in Arbeit."
                ;;
        esac
    else
        case $choice in
            1)  setup_wireguard
                ;;
            2)  setup_plex
                ;;
            3)  setup_unifi
                ;;
            4)  setup_homeassistant
                ;;
            5)  setup_netdata
                ;;
            6)  setup_portainer
                ;;
            7)  setup_nextcloud
                ;;
            8)  setup_meshcentral
                ;;
	    9)  setup_Pi
                ;;
            10)  setup_drive
                ;;
            11) disable_sleep
                ;;
            12) setup_wireguard
                setup_drive
                setup_lex
                setup_unifi
                setup_homeassistant
                setup_netdata
                setup_portainer
                setup_nextcloud
                setup_meshcentral
                disable_sleep
                ;;
            13) print_info "Setup beendet. Viel Spa√ü mit Ihrem Server!"
                exit 0
                ;;
            *)  print_error "Ung√ºltige Option! Bitte erneut versuchen."
                ;;
        esac
    fi

    # Warten, bis der Benutzer eine beliebige Taste dr√ºckt
    read -p "Dr√ºcken Sie Enter, um ins Men√º zur√ºckzukehren..."
    main_menu
}

# Skript starten
main_menu
