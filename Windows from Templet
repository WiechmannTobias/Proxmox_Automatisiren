#!/bin/bash

# Skript zur Installation von Terraform und Erstellung von Windows-VMs aus einem Template auf Proxmox VE

# 1. Bereinigung vorhandener Terraform-Installation und zugehöriger Dateien
echo "Bereinigung vorhandener Terraform-Installation und zugehöriger Dateien..."

if command -v terraform &> /dev/null; then
  echo "Terraform wird entfernt..."
  rm -f /usr/local/bin/terraform
fi

echo "Löschen von Terraform-Konfigurationsdateien..."
rm -f provider.tf credentials.auto.tfvars terraform.tfstate* .terraform.lock.hcl
rm -rf .terraform/

echo "Löschen von Terraform-Log- und Cache-Dateien..."
find ~ -name ".terraform" -type d -exec rm -rf {} + 2>/dev/null
find /tmp -name "terraform*" -exec rm -rf {} + 2>/dev/null

if dpkg -l | grep -i terraform &> /dev/null; then
  echo "Vorherige Terraform-Pakete werden deinstalliert..."
  apt purge -y terraform
fi

echo "Bereinigung abgeschlossen."

# 2. Update des Systems
echo "System wird aktualisiert..."
apt update && apt upgrade -y

# 3. Installation der erforderlichen Pakete
echo "Erforderliche Pakete werden installiert..."
apt install -y curl unzip wget

# 4. Installation von Terraform
echo "Terraform wird heruntergeladen und installiert..."
curl -O https://releases.hashicorp.com/terraform/1.5.3/terraform_1.5.3_linux_amd64.zip
unzip terraform_1.5.3_linux_amd64.zip
mv terraform /usr/local/bin/
chmod +x /usr/local/bin/terraform

# 5. Erstellen der provider.tf Datei
echo "Erstellen der provider.tf Datei..."

cat <<EOL > provider.tf
terraform {
  required_providers {
    proxmox = {
      source  = "telmate/proxmox"
      version = "2.9.11"
    }
  }
}

variable "proxmox_api_url" {
  type = string
}

variable "proxmox_api_token_id" {
  type     = string
  sensitive = true
}

variable "proxmox_api_token_secret" {
  type     = string
  sensitive = true
}

provider "proxmox" {
  pm_api_url       = var.proxmox_api_url
  pm_api_token_id  = var.proxmox_api_token_id
  pm_api_token_secret = var.proxmox_api_token_secret
  pm_tls_insecure   = true
}
EOL

# Erstellen der credentials.auto.tfvars-Datei
echo "Creating credentials.auto.tfvars file..."
cat <<EOL > credentials.auto.tfvars
proxmox_api_url = "https://10.8.0.5:8006/api2/json"
proxmox_api_token_id = "root@pam!terraform2"
proxmox_api_token_secret = "9959eda4-e092-4f09-a8a9-fb6281d59772"
EOL

# Eingabeaufforderung für die Anzahl der VMs
echo "Wie viele VMs möchten Sie erstellen?"
read vm_count

# Startwert für VM-ID und Name
initial_vmid=117  # Erste VM-ID nach dem Template (Template ist VMID 116)
initial_name="Windows-10-VM"
proxmox_node="JKT" # Ersetze mit deinem Proxmox-Knoten

# 6. VMs erstellen
for ((i=1; i<=vm_count; i++)); do
  vmid=$((initial_vmid + i - 1)) # VM-ID hochzählen
  vm_name="${initial_name}-${i}" # Name mit Bindestrich hochzählen

  echo "Erstelle VM ${vm_name} mit VMID ${vmid} aus Template..."

  # Klonen der VM aus dem Template (mit vollständiger Kopie)
  qm clone 116 ${vmid} --name ${vm_name} --target ${proxmox_node} --full

  # Anpassen der Ressourcen der neuen VM
  qm set ${vmid} --cores 6 --memory 8192 --sockets 1

  # Netzwerk hinzufügen
  qm set ${vmid} --net0 model=e1000,bridge=vmbr0

  # Sicherstellen, dass die VM auf "onboot" steht
  qm set ${vmid} --onboot 1

  # VM starten
  echo "Starte VM ${vm_name}..."
  qm start ${vmid}

  # Warten auf VM-Status "running"
  while ! qm status ${vmid} | grep -q "status: running"; do
    sleep 5
    echo "Warten auf VM ${vmid}..."
  done

  echo "VM ${vm_name} erfolgreich erstellt und gestartet."
done

echo "Alle VMs erfolgreich aus Template erstellt!"
